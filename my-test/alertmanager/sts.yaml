apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: alertmanager
  namespace: mon
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: alertmanager
  serviceName: alertmanager
  template:
    metadata:
      annotations:
        prometheus.io/port: "9093"
        prometheus.io/scrape: "true"
      creationTimestamp: null
      labels:
        app: alertmanager
        stack: monitoring
      name: alertmanager
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: node-role.kubernetes.io/monitoring
                operator: In
                values:
                - "true"
            weight: 100
          - preference:
              matchExpressions:
              - key: node-role.kubernetes.io/worker
                operator: In
                values:
                - "true"
            weight: 10
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        runAsNonRoot: true
      containers:
      - env:
        - name: PEERS
          value: alertmanager-0.alertmanager.mon.svc.cluster.local:9094,alertmanager-1.alertmanager.mon.svc.cluster.local:9094,alertmanager-2.alertmanager.mon.svc.cluster.local:9094
        image: infra/monitoring-prom-alertmanager:v0.24.0-2022-06-14-03aa0cf9
        imagePullPolicy: IfNotPresent
        name: alertmanager
        resources:
          limits:
            cpu: 200m
            memory: 200M
          requests:
            cpu: 50m
            memory: 50M
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/alertmanager/
          name: configs-files
        - mountPath: /var/lib/alertmanager/data
          name: data-alertmanager
      - args:
        - -volume-dir=/etc/alertmanager/
        - -webhook-url=http://127.0.0.1:9093/-/reload
        image: infra/monitoring-prom-reloader:v0.7.1-2022-06-14-61b42da6
        imagePullPolicy: IfNotPresent
        name: alertmanager-reloader
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 50m
            memory: 50Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/alertmanager/
          name: configs-files
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - name: configs-files
        projected:
          defaultMode: 420
          sources:
          - configMap:
              name: alertmanager-config
          - configMap:
              name: alertmanager-template
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app: alertmanager
      name: data-alertmanager
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: csi-rbd
      volumeMode: Filesystem
    status:
      phase: Pending

###
{{- if .Values.alertmanager.enable }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.alertmanager.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.alertmanager.name }}
  serviceName: {{ .Values.alertmanager.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.alertmanager.name }}
        stack: monitoring
      name: {{ .Values.alertmanager.name }}
    spec:
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        runAsNonRoot: true
      containers:
      - image: prom/alertmanager:v0.24.0
        name: {{ .Values.alertmanager.name }}
        args:
          - "--config.file=/etc/alertmanager/manager.yaml"
          - "--storage.path=/var/lib/alertmanager/data"
        ports:
        - name: {{ .Values.alertmanager.name }}
          containerPort: 9093
        resources:
          limits:
            cpu: {{ .Values.alertmanager.resources.limit_cpu }}
            memory: {{ .Values.alertmanager.resources.limit_memory }}
          requests:
            cpu: {{ .Values.alertmanager.resources.request_cpu }}
            memory: {{ .Values.alertmanager.resources.request_memory }}
        volumeMounts:
        - mountPath: /etc/alertmanager/
          name: configs-files
        - mountPath: /var/lib/alertmanager/data
          name: data-alertmanager
      volumes:
      - name: configs-files
        projected:
          defaultMode: 420
          sources:
          - configMap:
              name: {{ .Values.alertmanager.name }}-config
          - configMap:
              name: {{ .Values.alertmanager.name }}-template
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app: {{ .Values.alertmanager.name }}
      name: data-alertmanager
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.alertmanager.storagePvc }}
      storageClassName: {{ .Values.alertmanager.storageClass }}

{{- end }}