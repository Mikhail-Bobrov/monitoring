{{- if .Values.prometheus.enable }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ .Values.prometheus.name }}
  name: {{ .Values.prometheus.name }}
  namespace: {{ .Values.namespace }}
spec:
  podManagementPolicy: OrderedReady
  replicas: {{ .Values.prometheus.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Values.prometheus.name }}
  serviceName: {{ .Values.prometheus.name }}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: {{ .Values.prometheus.name }}
        stack: monitoring
    spec:
      {{- if .Values.prometheus.security }}
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        runAsNonRoot: true
      {{- end }}
      containers:
      - args:
        - --web.enable-lifecycle
        - --storage.tsdb.retention.time={{- .Values.prometheus.args.retentionPeriod | default "1h" }}
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path={{- .Values.prometheus.args.storagePath | default "/var/lib/data" }}
        {{- if .Values.prometheus.extArgs }}
        {{- range .Values.prometheus.extArgs }}
        - {{ . }}
        {{- end }}
        {{- end }}
        image: {{ .Values.prometheus.image.repo -}}/{{- .Values.prometheus.image.name -}}:{{- .Values.prometheus.image.tag }}
        imagePullPolicy: IfNotPresent
        name: {{ .Values.prometheus.name }}
        {{- if .Values.prometheus.resources }}
        resources:
        {{- with .Values.prometheus.resources }}
          limits:
            cpu: {{ .limit.cpu  | default "100m" }}
            memory: {{ .limit.memory | default "200Mi" }}
          requests:
            cpu: {{ .request.cpu | default "50m" }}
            memory: {{ .request.memory | default "100Mi" }}
        {{- end }}
        {{- end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/prometheus/
          name: configs-files
        - mountPath: {{ .Values.prometheus.args.storagePath | default "/var/lib/data" }}
          name: data-prometheus
      - args:
        - -volume-dir=/etc/prometheus/
        - -webhook-url=http://127.0.0.1:8080/-/reload
        image: {{ .Values.prometheus.sidecar.image }}
        imagePullPolicy: IfNotPresent
        name: {{ .Values.prometheus.name -}}-reloader
        {{- with .Values.prometheus.sidecar.resources }}
        resources:
          limits:
            cpu: {{ .limit.cpu  | default "100m" }}
            memory: {{ .limit.memory | default "200Mi" }}
          requests:
            cpu: {{ .request.cpu | default "50m" }}
            memory: {{ .request.memory | default "100Mi" }}
        {{- end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/prometheus/
          name: configs-files
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccount: {{ .Values.prometheus.name -}}-sa
      serviceAccountName: {{ .Values.prometheus.name -}}-sa
      terminationGracePeriodSeconds: 30
      volumes:
      - name: configs-files
        projected:
          defaultMode: 420
          sources:
          - configMap:
              name: {{ .Values.prometheus.name -}}-config
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app: {{ .Values.prometheus.name }}
      name: data-prometheus
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.prometheus.storage.capacity }}
      storageClassName: {{ .Values.prometheus.storage.class }}
      volumeMode: Filesystem
    status:
      phase: Pending
{{- end }}