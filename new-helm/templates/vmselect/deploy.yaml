{{- if .Values.vmselect.enable }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.vmselect.name }}
  name: {{ .Values.vmselect.name }}
  namespace: {{ .Values.namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.vmselect.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Values.vmselect.name }}
  strategy:
  {{- if eq .Values.vmselect.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: {{ .Values.vmselect.strategy.maxUnavailable }}
    type: RollingUpdate
  {{- end }}
  {{- if eq .Values.vmselect.strategy.type "Recreate" }}
    type: Recreate
  {{- end }}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: {{ .Values.vmselect.name }}
        component: {{ .Values.vmselect.name }}
        stack: monitoring
    spec:
      containers:
      - args:
        - --envflag.enable=true
        - --storageNode=vmstorage.mon.svc.cluster.local:8401
        {{- if .Values.vmselect.args }}
        {{- range .Values.vmselect.args }}
        - {{ . }}
        {{- end }}
        {{- end }}
        image: {{ .Values.vmselect.image.repo -}}/{{- .Values.vmselect.image.name -}}:{{- .Values.vmselect.image.tag }}
        imagePullPolicy: IfNotPresent
        name: {{ .Values.vmselect.name }}
        {{- if .Values.vminsert.resources }}
        resources:
        {{- with .Values.vminsert.resources }}
          limits:
            cpu: {{ .limit.cpu  | default "500m" }}
            memory: {{ .limit.memory | default "1024Mi" }}
          requests:
            cpu: {{ .request.cpu | default "150m" }}
            memory: {{ .request.memory | default "300Mi" }}
        {{- end }}
        {{- end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
{{- end }}