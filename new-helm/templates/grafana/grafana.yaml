{{- if .Values.grafana.enable }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.grafana.name }}
  namespace: {{ .Values.namespace }}
  labels:
    stack: monitoring
    app: {{ .Values.grafana.name }}
spec:
  replicas: {{ .Values.grafana.replicas }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: {{ .Values.grafana.name }}
      stack: monitoring
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ .Values.grafana.name }}
        stack: monitoring
    spec:
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      containers:
        - name: {{ .Values.grafana.name }}
          image: "grafana/grafana:8.3.4"  ##not now
          imagePullPolicy: IfNotPresent
          ports:
            - name: {{ .Values.grafana.name }}
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.grafana.name -}}-user
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.grafana.name -}}-user
                  key: admin-password
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          {{- if .Values.grafana.resources }}
          resources:
          {{- with .Values.grafana.resources }}
            limits:
              cpu: {{ .limit.cpu  | default "100m" }}
              memory: {{ .limit.memory | default "200Mi" }}
            requests:
              cpu: {{ .request.cpu | default "50m" }}
              memory: {{ .request.memory | default "100Mi" }}
          {{- end }}
          {{- end }}
          volumeMounts:
          - name: storage
            mountPath: "/var/lib/grafana"
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: {{ .Values.grafana.name -}}-pvc
{{- end }}